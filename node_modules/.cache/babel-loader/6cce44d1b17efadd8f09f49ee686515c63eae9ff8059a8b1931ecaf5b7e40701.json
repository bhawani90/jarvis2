{"ast":null,"code":"var _jsxFileName = \"/Users/bsingh/jarvis/src/Tenanttable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useTable, useFilters } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Tenanttable(_ref) {\n  _s();\n  let {\n    columns,\n    data\n  } = _ref;\n  // Use the state and functions returned from useTable to build your UI\n  const [filterInput, setFilterInput] = useState(\"\");\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters);\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"tenant\", value);\n\n    // Update the name filter. \n    //Now the table will search for that name and show only the rows which have a matching name\n    setFilterInput(value);\n  };\n\n  // Render the UI for your table\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterInput,\n      onChange: handleFilterChange,\n      placeholder: \"Search name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Tenanttable, \"Xftx1hFVkkzfUcQ3G9WCNhrsLes=\", false, function () {\n  return [useTable];\n});\n_c = Tenanttable;\nvar _c;\n$RefreshReg$(_c, \"Tenanttable\");","map":{"version":3,"names":["React","useState","useTable","useFilters","jsxDEV","_jsxDEV","Fragment","_Fragment","Tenanttable","_ref","_s","columns","data","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChange","e","value","target","undefined","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/Users/bsingh/jarvis/src/Tenanttable.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useTable, useFilters} from \"react-table\";\n\nexport default function Tenanttable({ columns, data }) {\n\n  // Use the state and functions returned from useTable to build your UI\n  const [filterInput, setFilterInput] = useState(\"\");\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter \n  } = useTable(\n    {\n      columns,\n      data\n    },\n     useFilters\n    );\n\n    const handleFilterChange = e => {\n      const value = e.target.value || undefined;\n      setFilter(\"tenant\", value);\n     \n    // Update the name filter. \n    //Now the table will search for that name and show only the rows which have a matching name\n      setFilterInput(value);\n    };\n    \n  // Render the UI for your table\n  return (\n    <>\n    <input\n        value={filterInput}\n        onChange={handleFilterChange}\n        placeholder={\"Search name\"}\n      />\n\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n    </>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,UAAU,QAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAAoB;EAAAC,EAAA;EAAA,IAAnB;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAAH,IAAA;EAEnD;EACA,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAM;IACJc,aAAa;IACbC,iBAAiB;IACjBC,YAAY;IACZC,IAAI;IACJC,UAAU;IACVC;EACF,CAAC,GAAGlB,QAAQ,CACV;IACES,OAAO;IACPC;EACF,CAAC,EACAT,UACD,CAAC;EAED,MAAMkB,kBAAkB,GAAGC,CAAC,IAAI;IAC9B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK,IAAIE,SAAS;IACzCL,SAAS,CAAC,QAAQ,EAAEG,KAAK,CAAC;;IAE5B;IACA;IACET,cAAc,CAACS,KAAK,CAAC;EACvB,CAAC;;EAEH;EACA,oBACElB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,gBACArB,OAAA;MACIkB,KAAK,EAAEV,WAAY;MACnBc,QAAQ,EAAEN,kBAAmB;MAC7BO,WAAW,EAAE;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eAEJ3B,OAAA;MAAA,GAAWU,aAAa,CAAC,CAAC;MAAAW,QAAA,gBACxBrB,OAAA;QAAAqB,QAAA,EACGT,YAAY,CAACgB,GAAG,CAACC,WAAW,iBAC3B7B,OAAA;UAAA,GAAQ6B,WAAW,CAACC,mBAAmB,CAAC,CAAC;UAAAT,QAAA,EACtCQ,WAAW,CAACE,OAAO,CAACH,GAAG,CAACI,MAAM,iBAC7BhC,OAAA;YAAA,GAAQgC,MAAM,CAACC,cAAc,CAAC,CAAC;YAAAZ,QAAA,EAAGW,MAAM,CAACE,MAAM,CAAC,QAAQ;UAAC;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAC/D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACR3B,OAAA;QAAA,GAAWW,iBAAiB,CAAC,CAAC;QAAAU,QAAA,EAC3BR,IAAI,CAACe,GAAG,CAAC,CAACO,GAAG,EAAEC,CAAC,KAAK;UACpBtB,UAAU,CAACqB,GAAG,CAAC;UACf,oBACEnC,OAAA;YAAA,GAAQmC,GAAG,CAACE,WAAW,CAAC,CAAC;YAAAhB,QAAA,EACtBc,GAAG,CAACG,KAAK,CAACV,GAAG,CAACW,IAAI,IAAI;cACrB,oBAAOvC,OAAA;gBAAA,GAAQuC,IAAI,CAACC,YAAY,CAAC,CAAC;gBAAAnB,QAAA,EAAGkB,IAAI,CAACL,MAAM,CAAC,MAAM;cAAC;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAChE,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP;AAACtB,EAAA,CA/DuBF,WAAW;EAAA,QAY7BN,QAAQ;AAAA;AAAA4C,EAAA,GAZUtC,WAAW;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}